# -*- coding: utf-8 -*-
"""Copy of 522H0138_GK_NLP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PUP2A-N37_HxYvsv7PORuGlZ87E1pG5G
"""

!pip install underthesea

import pandas as pd
import numpy as np
import re
import string
import torch
import gensim
import seaborn as sns
import matplotlib.pyplot as plt
from underthesea import word_tokenize

from underthesea import word_tokenize
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from gensim.models.doc2vec import Doc2Vec, TaggedDocument
from tqdm import tqdm

import numpy as np
import pandas as pd

# Danh sách môn thể thao
labels = ["bóng đá", "bóng rổ", "tennis", "đua xe", "võ thuật", "cầu lông", "bóng chuyền", "golf", "bơi lội"]
np.random.seed(42)

# Danh sách từ khóa
keywords = {
    "bóng đá": ["bàn thắng", "thẻ đỏ", "đá phạt", "VAR", "sút xa", "hậu vệ", "tiền đạo", "penalty"],
    "bóng rổ": ["3 điểm", "slam dunk", "rebound", "trợ công", "đội hình", "hiệp 4", "NBA"],
    "tennis": ["set point", "break", "Grand Slam", "tay vợt", "sân cỏ", "bóng nỉ"],
    "đua xe": ["tốc độ", "pit stop", "F1", "tay đua", "lốp xe", "đường đua"],
    "võ thuật": ["knockout", "quyền anh", "đấm móc", "đòn cước", "trận đấu"],
    "cầu lông": ["cú smash", "lưới", "tay vợt", "phản công", "cầu rơi"],
    "bóng chuyền": ["đập bóng", "chuyền hai", "bắt bước 1", "phòng thủ", "VNL"],
    "golf": ["gậy driver", "putt", "lỗ golf", "green", "đánh bóng"],
    "bơi lội": ["50m tự do", "kình ngư", "về đích", "hồ bơi", "bơi bướm"]
}

# Danh sách đội tuyển & vận động viên
teams_players = {
    "bóng đá": ["Messi", "Ronaldo", "Real Madrid", "Liverpool"],
    "bóng rổ": ["LeBron James", "Stephen Curry", "Lakers", "Warriors"],
    "tennis": ["Novak Djokovic", "Rafael Nadal", "Serena Williams"],
    "đua xe": ["Lewis Hamilton", "Max Verstappen", "Red Bull Racing"],
    "võ thuật": ["Conor McGregor", "Khabib Nurmagomedov", "Mike Tyson"],
    "cầu lông": ["Kento Momota", "Lee Chong Wei", "Axelsen"],
    "bóng chuyền": ["Nguyễn Thu Hoài", "Zhu Ting", "Kim Yeon-koung"],
    "golf": ["Tiger Woods", "Phil Mickelson", "Rory McIlroy"],
    "bơi lội": ["Michael Phelps", "Katie Ledecky", "Caeleb Dressel"]
}

# Hàm kiểm tra ngữ nghĩa hợp lý
def is_valid_sentence(label, words, other_words):
    # Kiểm tra xem từ khóa có trùng với môn thể thao chính không
    for word in other_words:
        if word in keywords[label]:
            return False  # Nếu có từ không phù hợp, câu không hợp lý
    return True

# Tạo dataset
corpus = []
num_samples = 50000
for _ in range(num_samples):
    label = np.random.choice(labels)
    words = list(np.random.choice(keywords[label], size=np.random.randint(2, 4), replace=False))
    player = np.random.choice(teams_players[label])

    # Chọn từ khóa từ môn thể thao khác
    other_label = np.random.choice([l for l in labels if l != label])
    other_words = list(np.random.choice(keywords[other_label], size=np.random.randint(1, 3), replace=False))

    # Kiểm tra ngữ nghĩa, nếu không hợp lý thì bỏ từ khóa khác
    if not is_valid_sentence(label, words, other_words):
        other_words = []

    # Chọn câu ngắn hoặc dài
    if np.random.rand() > 0.5:
        text_templates = [
            f"{player} đã thể hiện xuất sắc với {', '.join(words)}.",
            f"Trận đấu giữa {player} có nhiều sự kiện với {', '.join(words + other_words)}.",
            f"Giải đấu vừa qua, {player} thi đấu với phong độ tuyệt vời, đạt {', '.join(words)}."
        ]
    else:
        text_templates = [
            f"Trong giải đấu vừa qua, {player} đã khiến khán giả phải bất ngờ khi thể hiện xuất sắc với {', '.join(words)}. "
            f"Không chỉ vậy, trận đấu còn trở nên hấp dẫn khi {player} chạm trán đối thủ mạnh với tình huống {', '.join(other_words)}.",

            f"Một trận đấu kịch tính đã diễn ra khi {player} có màn trình diễn đỉnh cao với {', '.join(words)}. "
            f"Người hâm mộ đã rất phấn khích khi chứng kiến những pha bóng mãn nhãn và cú {', '.join(other_words)} "
            f"tạo nên sự gay cấn đến phút cuối cùng.",

            f"{player} đã chứng minh đẳng cấp khi thi đấu xuất sắc, tận dụng mọi cơ hội để ghi điểm với {', '.join(words)}. "
            f"Trận đấu đầy căng thẳng khi đối thủ không ngừng phản công với các pha {', '.join(other_words)} khiến khán giả hồi hộp."
        ]

    text = np.random.choice(text_templates)
    cor pus.append((text, label))

# Chuyển thành DataFrame
df = pd.DataFrame(corpus, columns=["text", "label"])

# Hiển thị một số dòng của tập dữ liệu
print("Dữ liệu mẫu:")
print(df.head())

# Lưu vào file CSV
df.to_csv("sports_dataset_v2.csv", index=False)

# Tiền xử lý văn bản
np.random.shuffle(df.values)
df["clean_text"] = df["text"].str.lower().str.replace(r"[{}]".format(string.punctuation), "", regex=True).str.replace(r"\d+", "", regex=True)
df["clean_text"] = df["clean_text"].apply(lambda x: word_tokenize(x, format="text"))

# Biểu diễn bằng TF-IDF để giảm overfitting
vectorizer = TfidfVectorizer(max_features=100)
X_bow = vectorizer.fit_transform(df["clean_text"])
y = df["label"].astype(str)

X_train, X_test, y_train, y_test = train_test_split(X_bow, y, test_size=0.3, random_state=42, stratify=y)

# Huấn luyện Naive Bayes với Laplace smoothing
nb_model = MultinomialNB(alpha=0.1)
nb_model.fit(X_train, y_train)
y_pred_nb = nb_model.predict(X_test)
nb_acc = accuracy_score(y_test, y_pred_nb)
print("Naive Bayes Accuracy:", nb_acc)
print(classification_report(y_test, y_pred_nb))

# Huấn luyện Logistic Regression với regularization cao hơn
lr_model = LogisticRegression(max_iter=1000, C=0.1)
lr_model.fit(X_train, y_train)
y_pred_lr = lr_model.predict(X_test)
lr_acc = accuracy_score(y_test, y_pred_lr)
print("Logistic Regression Accuracy:", lr_acc)
print(classification_report(y_test, y_pred_lr))

# Huấn luyện Decision Tree với độ phức tạp thấp hơn
dt_model = DecisionTreeClassifier(max_depth=5, min_samples_split=20, random_state=42)
dt_model.fit(X_train, y_train)
y_pred_dt = dt_model.predict(X_test)
dt_acc = accuracy_score(y_test, y_pred_dt)
print("Decision Tree Accuracy:", dt_acc)
print(classification_report(y_test, y_pred_dt))

# Biểu diễn bằng Doc2Vec
tagged_data = [TaggedDocument(words=text.split(), tags=[str(i)]) for i, text in enumerate(df["clean_text"])]
d2v_model = Doc2Vec(tagged_data, vector_size=100, window=5, min_count=2, workers=4, epochs=30)
X_d2v = np.array([d2v_model.infer_vector(text.split()) for text in df["clean_text"]])
X_train_d2v, X_test_d2v, y_train_d2v, y_test_d2v = train_test_split(X_d2v, y, test_size=0.3, random_state=42, stratify=y)

# Huấn luyện với Doc2Vec
lr_d2v = LogisticRegression(max_iter=1000, C=0.5)
lr_d2v.fit(X_train_d2v, y_train_d2v)
y_pred_d2v = lr_d2v.predict(X_test_d2v)
d2v_acc = accuracy_score(y_test_d2v, y_pred_d2v)
print("Logistic Regression (Doc2Vec) Accuracy:", d2v_acc)
print(classification_report(y_test_d2v, y_pred_d2v))

# So sánh mô hình
models = ["Naive Bayes", "Logistic Regression", "Decision Tree", "Logistic Regression (Doc2Vec)"]
accuracies = [nb_acc, lr_acc, dt_acc, d2v_acc]

plt.figure(figsize=(8,5))
sns.barplot(x=models, y=accuracies, palette="coolwarm")
plt.ylim(0, 1)
plt.ylabel("Accuracy")
plt.xlabel("Model")
plt.title("So sánh độ chính xác của các mô hình")
plt.xticks(rotation=15)
plt.show()

